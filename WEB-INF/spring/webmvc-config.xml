<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd                 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd                 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">


	<!--ACV OJO 20140917 
	Copiado el fichero de mismo nombre y contenido 
	
	desde el original y requerido por Spring
	
		src/main/webapp/WEB-INF/spring/webmvc-config.xml
	
	al nuevo y redundate pero requerido para tests de controllers
	
		src/main/resources/META-INF/spring/webmvc-config.xml
	 
	 * Ha sido necesario copiar webmvc-config.xml al lado de applicationContext.xml en src/main/resources/META-INF/spring/,
	 * pues si no no es visible en class path al correr el test.
	 * 
	 ver Mockito_Test.java
	 @ContextConfiguration( locations={
		    "classpath:/META-INF/spring/applicationContext.xml",
		    "classpath:/META-INF/spring/applicationContext-security.xml",
		    "classpath:/META-INF/spring/webmvc-config.xml"})
	 */

	-->

	<!-- The controllers are autodetected POJOs labeled with the @Controller
		annotation. -->
	<context:component-scan base-package="org.modeldd.springnut" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
	</context:component-scan>

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods
		Also registers default Formatters and Validators for use across all @Controllers -->
	<mvc:annotation-driven conversion-service="applicationConversionService">
        <mvc:argument-resolvers>
            <bean class="com.github.dandelion.datatables.extras.spring3.ajax.DatatablesCriteriasResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving
		up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>

	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static
		resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler/>

	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
	</mvc:interceptors>

	<!-- Selects a static view for rendering without the need for an explicit
		controller -->
	<mvc:view-controller path="/enlaces_comprobar_roles" view-name="enlaces_comprobar_roles" />


	<mvc:view-controller path="/exceptions/uncaughtException"/>
	<mvc:view-controller path="/exceptions/resourceNotFound"/>
	<mvc:view-controller path="/exceptions/dataAccessFailure"/>

	<!-- Resolves localized messages*.properties and application.properties
		files in the application to allow for internationalization. The messages*.properties
		files translate Roo generated messages which are part of the admin interface,
		the application.properties resource bundle localizes all application specific
		messages such as entity names and menu items. -->
	<bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application" p:fallbackToSystemLocale="false"/>

	<!-- Store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>

	<!-- Resolves localized <theme_name>.properties files in the classpath to
		allow for theme support -->
	<bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

	<!-- Store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

	<!-- This bean resolves specific types of exceptions to corresponding logical
		- view names for error views. The default behaviour of DispatcherServlet
		- is to propagate all exceptions to the servlet container: this will happen
		- here with all other types of exceptions. -->
	<bean class="org.modeldd.springnut.web.SpringnutExceptionResolver" p:defaultErrorView="exceptions/uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">exceptions/dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">exceptions/resourceNotFound</prop>
				<prop key=".TypeMismatchException">exceptions/resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">exceptions/resourceNotFound</prop>
			</props>
		</property>
	</bean>

	<!-- Enable this for integration of file upload functionality -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>



	<bean class="org.thymeleaf.templateresolver.ServletContextTemplateResolver" id="templateResolver">
		<property name="prefix" value="/WEB-INF/thymeleaf/"/>
		<property name="suffix" value=".html"/>
		<property name="templateMode" value="HTML5"/>
		<property name="cacheable" value="false"/>
	</bean>
	<bean class="org.thymeleaf.spring3.SpringTemplateEngine" id="templateEngine">
		<property name="templateResolver" ref="templateResolver"/>
		<property name="dialects">
			<set>
				<bean class="org.thymeleaf.spring3.dialect.SpringStandardDialect"/>
				<bean class="nz.net.ultraq.web.thymeleaf.LayoutDialect"/>
				<!-- IE comments -->
				<bean class="org.thymeleaf.extras.conditionalcomments.dialect.ConditionalCommentsDialect"/>
				<!-- Dandelion-datatables -->
				<bean class="com.github.dandelion.datatables.thymeleaf.dialect.DataTablesDialect"/>
				<!-- Spring Security dialect  -->
				<bean class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect"/>
			</set>
		</property>
	</bean>


	<bean class="org.thymeleaf.spring3.view.ThymeleafViewResolver">
		<property name="templateEngine" ref="templateEngine"/>
		<property name="order" value="1"/>
		<property name="contentType" value="text/html;charset=UTF-8"/>
	</bean>


	<bean class="org.modeldd.springnut.web.ApplicationConversionServiceFactoryBean" id="applicationConversionService"/>

	<bean class="org.springframework.web.servlet.view.XmlViewResolver" id="jasperReportsXmlViewResolver" p:location="/WEB-INF/spring/jasper-views.xml" p:order="0"/>

</beans>
